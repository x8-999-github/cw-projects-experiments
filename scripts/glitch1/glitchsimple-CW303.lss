
glitchsimple-CW303.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00802000  00001450  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  00802044  00802044  00001528  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003f  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000024b6  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ddb  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000898  00000000  00000000  00004a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004e0  00000000  00000000  000052e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a69  00000000  00000000  000057c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013c6  00000000  00000000  0000622d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000075f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__ctors_end>
       4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
       8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
       c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      10:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      14:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      18:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      1c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      20:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      24:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      28:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      2c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      30:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      34:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      3c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      40:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      44:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      48:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      4c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      50:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      54:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      58:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      5c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      60:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      64:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      68:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      6c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      70:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      74:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      78:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      7c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      80:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      84:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      88:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      8c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      90:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      94:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      98:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      9c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      a8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      ac:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      b0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      b4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      b8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      bc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      c0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      c4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      c8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      cc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      d0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      d4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      d8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      dc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      e0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      e4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      e8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      ec:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      f0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      f4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      f8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
      fc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     100:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     104:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     108:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     10c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     110:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     114:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     118:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     11c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     120:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     124:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     128:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     12c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     130:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     134:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     138:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     13c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     140:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     144:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     148:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     14c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     150:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     154:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     158:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     15c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     160:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     164:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     168:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     16c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     170:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     174:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     178:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     17c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     180:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     184:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     188:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     18c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     190:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     194:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     198:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     19c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1a0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1a4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1a8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1ac:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1b0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1b4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1b8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1bc:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1c0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
     1c4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 bc 02 	jmp	0x578	; 0x578 <check_version>

000001cc <__trampolines_end>:
     1cc:	01 02       	muls	r16, r17
     1ce:	04 08       	sbc	r0, r4
     1d0:	10 20       	and	r1, r0
     1d2:	40 80       	ld	r4, Z
     1d4:	1b 36       	cpi	r17, 0x6B	; 107

000001d6 <aes_sbox>:
     1d6:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     1e6:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     1f6:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     206:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     216:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     226:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     236:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     246:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     256:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     266:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     276:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     286:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     296:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     2a6:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     2b6:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     2c6:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002d6 <__ctors_end>:
     2d6:	11 24       	eor	r1, r1
     2d8:	1f be       	out	0x3f, r1	; 63
     2da:	cf ef       	ldi	r28, 0xFF	; 255
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df e3       	ldi	r29, 0x3F	; 63
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0c bf       	out	0x3c, r16	; 60

000002e6 <__do_copy_data>:
     2e6:	10 e2       	ldi	r17, 0x20	; 32
     2e8:	a0 e0       	ldi	r26, 0x00	; 0
     2ea:	b0 e2       	ldi	r27, 0x20	; 32
     2ec:	e0 e5       	ldi	r30, 0x50	; 80
     2ee:	f4 e1       	ldi	r31, 0x14	; 20
     2f0:	00 e0       	ldi	r16, 0x00	; 0
     2f2:	0b bf       	out	0x3b, r16	; 59
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__do_copy_data+0x14>
     2f6:	07 90       	elpm	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	a4 34       	cpi	r26, 0x44	; 68
     2fc:	b1 07       	cpc	r27, r17
     2fe:	d9 f7       	brne	.-10     	; 0x2f6 <__do_copy_data+0x10>

00000300 <__do_clear_bss>:
     300:	21 e2       	ldi	r18, 0x21	; 33
     302:	a4 e4       	ldi	r26, 0x44	; 68
     304:	b0 e2       	ldi	r27, 0x20	; 32
     306:	01 c0       	rjmp	.+2      	; 0x30a <.do_clear_bss_start>

00000308 <.do_clear_bss_loop>:
     308:	1d 92       	st	X+, r1

0000030a <.do_clear_bss_start>:
     30a:	a8 32       	cpi	r26, 0x28	; 40
     30c:	b2 07       	cpc	r27, r18
     30e:	e1 f7       	brne	.-8      	; 0x308 <.do_clear_bss_loop>
     310:	0e 94 37 07 	call	0xe6e	; 0xe6e <main>
     314:	0c 94 26 0a 	jmp	0x144c	; 0x144c <_exit>

00000318 <__bad_interrupt>:
     318:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000031c <uart_puts>:

#include <stdio.h>
#include "hal.h"


void uart_puts(char * s){
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ec 01       	movw	r28, r24
    while(*s){
     322:	89 91       	ld	r24, Y+
     324:	88 23       	and	r24, r24
     326:	19 f0       	breq	.+6      	; 0x32e <uart_puts+0x12>
        putch(*(s++));
     328:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
     32c:	fa cf       	rjmp	.-12     	; 0x322 <uart_puts+0x6>
    }
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <glitch_infinite>:

void glitch_infinite(void)
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	c8 54       	subi	r28, 0x48	; 72
     33e:	d1 09       	sbc	r29, r1
     340:	cd bf       	out	0x3d, r28	; 61
     342:	de bf       	out	0x3e, r29	; 62
    char str[64];
    unsigned int k = 0;
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
    //This also adds lots of SRAM access
    volatile uint16_t i, j;
    volatile uint32_t cnt;
    while(1){
        cnt = 0;
        trigger_high();
     348:	bb 24       	eor	r11, r11
     34a:	b3 94       	inc	r11
        for(i=0; i<200; i++){
            for(j=0; j<200; j++){
                cnt++;
            }
        }
        sprintf(str, "%lu %d %d %d\n", cnt, i, j, k++);
     34c:	80 e1       	ldi	r24, 0x10	; 16
     34e:	e8 2e       	mov	r14, r24
     350:	80 e2       	ldi	r24, 0x20	; 32
     352:	f8 2e       	mov	r15, r24
     354:	8e 01       	movw	r16, r28
     356:	0f 5f       	subi	r16, 0xFF	; 255
     358:	1f 4f       	sbci	r17, 0xFF	; 255
    //Declared volatile to avoid optimizing away loop.
    //This also adds lots of SRAM access
    volatile uint16_t i, j;
    volatile uint32_t cnt;
    while(1){
        cnt = 0;
     35a:	25 96       	adiw	r28, 0x05	; 5
     35c:	1c ae       	std	Y+60, r1	; 0x3c
     35e:	1d ae       	std	Y+61, r1	; 0x3d
     360:	1e ae       	std	Y+62, r1	; 0x3e
     362:	1f ae       	std	Y+63, r1	; 0x3f
     364:	25 97       	sbiw	r28, 0x05	; 5
        trigger_high();
     366:	b0 92 05 06 	sts	0x0605, r11
        trigger_low();
     36a:	b0 92 06 06 	sts	0x0606, r11
        for(i=0; i<200; i++){
     36e:	29 96       	adiw	r28, 0x09	; 9
     370:	1e ae       	std	Y+62, r1	; 0x3e
     372:	1f ae       	std	Y+63, r1	; 0x3f
     374:	29 97       	sbiw	r28, 0x09	; 9
     376:	29 96       	adiw	r28, 0x09	; 9
     378:	8e ad       	ldd	r24, Y+62	; 0x3e
     37a:	9f ad       	ldd	r25, Y+63	; 0x3f
     37c:	29 97       	sbiw	r28, 0x09	; 9
     37e:	88 3c       	cpi	r24, 0xC8	; 200
     380:	91 05       	cpc	r25, r1
     382:	78 f5       	brcc	.+94     	; 0x3e2 <glitch_infinite+0xae>
            for(j=0; j<200; j++){
     384:	27 96       	adiw	r28, 0x07	; 7
     386:	1e ae       	std	Y+62, r1	; 0x3e
     388:	1f ae       	std	Y+63, r1	; 0x3f
     38a:	27 97       	sbiw	r28, 0x07	; 7
     38c:	27 96       	adiw	r28, 0x07	; 7
     38e:	8e ad       	ldd	r24, Y+62	; 0x3e
     390:	9f ad       	ldd	r25, Y+63	; 0x3f
     392:	27 97       	sbiw	r28, 0x07	; 7
     394:	88 3c       	cpi	r24, 0xC8	; 200
     396:	91 05       	cpc	r25, r1
     398:	c8 f4       	brcc	.+50     	; 0x3cc <glitch_infinite+0x98>
                cnt++;
     39a:	25 96       	adiw	r28, 0x05	; 5
     39c:	8c ad       	ldd	r24, Y+60	; 0x3c
     39e:	9d ad       	ldd	r25, Y+61	; 0x3d
     3a0:	ae ad       	ldd	r26, Y+62	; 0x3e
     3a2:	bf ad       	ldd	r27, Y+63	; 0x3f
     3a4:	25 97       	sbiw	r28, 0x05	; 5
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	a1 1d       	adc	r26, r1
     3aa:	b1 1d       	adc	r27, r1
     3ac:	25 96       	adiw	r28, 0x05	; 5
     3ae:	8c af       	std	Y+60, r24	; 0x3c
     3b0:	9d af       	std	Y+61, r25	; 0x3d
     3b2:	ae af       	std	Y+62, r26	; 0x3e
     3b4:	bf af       	std	Y+63, r27	; 0x3f
     3b6:	25 97       	sbiw	r28, 0x05	; 5
    while(1){
        cnt = 0;
        trigger_high();
        trigger_low();
        for(i=0; i<200; i++){
            for(j=0; j<200; j++){
     3b8:	27 96       	adiw	r28, 0x07	; 7
     3ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     3bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     3be:	27 97       	sbiw	r28, 0x07	; 7
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	27 96       	adiw	r28, 0x07	; 7
     3c4:	8e af       	std	Y+62, r24	; 0x3e
     3c6:	9f af       	std	Y+63, r25	; 0x3f
     3c8:	27 97       	sbiw	r28, 0x07	; 7
     3ca:	e0 cf       	rjmp	.-64     	; 0x38c <glitch_infinite+0x58>
    volatile uint32_t cnt;
    while(1){
        cnt = 0;
        trigger_high();
        trigger_low();
        for(i=0; i<200; i++){
     3cc:	29 96       	adiw	r28, 0x09	; 9
     3ce:	4e ad       	ldd	r20, Y+62	; 0x3e
     3d0:	5f ad       	ldd	r21, Y+63	; 0x3f
     3d2:	29 97       	sbiw	r28, 0x09	; 9
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	29 96       	adiw	r28, 0x09	; 9
     3da:	4e af       	std	Y+62, r20	; 0x3e
     3dc:	5f af       	std	Y+63, r21	; 0x3f
     3de:	29 97       	sbiw	r28, 0x09	; 9
     3e0:	ca cf       	rjmp	.-108    	; 0x376 <glitch_infinite+0x42>
            for(j=0; j<200; j++){
                cnt++;
            }
        }
        sprintf(str, "%lu %d %d %d\n", cnt, i, j, k++);
     3e2:	69 01       	movw	r12, r18
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	c8 1a       	sub	r12, r24
     3e8:	d8 0a       	sbc	r13, r24
     3ea:	27 96       	adiw	r28, 0x07	; 7
     3ec:	ee ad       	ldd	r30, Y+62	; 0x3e
     3ee:	ff ad       	ldd	r31, Y+63	; 0x3f
     3f0:	27 97       	sbiw	r28, 0x07	; 7
     3f2:	29 96       	adiw	r28, 0x09	; 9
     3f4:	8e ad       	ldd	r24, Y+62	; 0x3e
     3f6:	9f ad       	ldd	r25, Y+63	; 0x3f
     3f8:	29 97       	sbiw	r28, 0x09	; 9
     3fa:	25 96       	adiw	r28, 0x05	; 5
     3fc:	4c ad       	ldd	r20, Y+60	; 0x3c
     3fe:	5d ad       	ldd	r21, Y+61	; 0x3d
     400:	6e ad       	ldd	r22, Y+62	; 0x3e
     402:	7f ad       	ldd	r23, Y+63	; 0x3f
     404:	25 97       	sbiw	r28, 0x05	; 5
     406:	3f 93       	push	r19
     408:	2f 93       	push	r18
     40a:	ff 93       	push	r31
     40c:	ef 93       	push	r30
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	7f 93       	push	r23
     414:	6f 93       	push	r22
     416:	5f 93       	push	r21
     418:	4f 93       	push	r20
     41a:	ff 92       	push	r15
     41c:	ef 92       	push	r14
     41e:	1f 93       	push	r17
     420:	0f 93       	push	r16
     422:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
        uart_puts(str);
     426:	c8 01       	movw	r24, r16
     428:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>
    }
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	de bf       	out	0x3e, r29	; 62
        for(i=0; i<200; i++){
            for(j=0; j<200; j++){
                cnt++;
            }
        }
        sprintf(str, "%lu %d %d %d\n", cnt, i, j, k++);
     430:	96 01       	movw	r18, r12
        uart_puts(str);
    }
     432:	93 cf       	rjmp	.-218    	; 0x35a <glitch_infinite+0x26>

00000434 <glitch1>:
}

void glitch1(void)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
    led_ok(1);
     43e:	80 e2       	ldi	r24, 0x20	; 32
     440:	80 93 06 06 	sts	0x0606, r24
    led_error(0);
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	80 93 05 06 	sts	0x0605, r24
    
    //Some fake variable
    volatile uint8_t a = 0;
     44a:	19 82       	std	Y+1, r1	; 0x01
    
    putch('A');
     44c:	81 e4       	ldi	r24, 0x41	; 65
     44e:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    
    //External trigger logic
    trigger_high();
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 05 06 	sts	0x0605, r24
    trigger_low();
     458:	80 93 06 06 	sts	0x0606, r24
    
    //Should be an infinite loop
    while(a != 2){
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	e9 f7       	brne	.-6      	; 0x45c <glitch1+0x28>
    ;
    }    
    
    led_error(1);
     462:	10 e4       	ldi	r17, 0x40	; 64
     464:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     468:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     46c:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     470:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     474:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     478:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     47c:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     480:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     484:	10 93 06 06 	sts	0x0606, r17
    
    uart_puts("1234");
     488:	8e e1       	ldi	r24, 0x1E	; 30
     48a:	90 e2       	ldi	r25, 0x20	; 32
     48c:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>
    
    led_error(1);
     490:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     494:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     498:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     49c:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     4a0:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     4a4:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     4a8:	10 93 06 06 	sts	0x0606, r17
    led_error(1);
     4ac:	10 93 06 06 	sts	0x0606, r17

    //Several loops in order to try and prevent restarting
    while(1){
    ;
    }
     4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <glitch1+0x7c>

000004b2 <glitch2>:

void glitch2(void)
{
    char c;  
    
    putch('B');
     4b2:	82 e4       	ldi	r24, 0x42	; 66
     4b4:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
       
    c = getch();
     4b8:	0e 94 2a 04 	call	0x854	; 0x854 <input_ch_0>
    
    trigger_high();
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	90 93 05 06 	sts	0x0605, r25
    trigger_low();
     4c2:	90 93 06 06 	sts	0x0606, r25
    
    if (c != 'q'){
     4c6:	81 37       	cpi	r24, 0x71	; 113
     4c8:	11 f0       	breq	.+4      	; 0x4ce <glitch2+0x1c>
        putch('1');
     4ca:	81 e3       	ldi	r24, 0x31	; 49
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <glitch2+0x1e>
    } else {
        putch('2');
     4ce:	82 e3       	ldi	r24, 0x32	; 50
     4d0:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    }
    putch('\n');
     4d4:	8a e0       	ldi	r24, 0x0A	; 10
     4d6:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    putch('\n');
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    putch('\n');
     4e0:	8a e0       	ldi	r24, 0x0A	; 10
     4e2:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    putch('\n');
     4e6:	8a e0       	ldi	r24, 0x0A	; 10
     4e8:	0c 94 31 04 	jmp	0x862	; 0x862 <output_ch_0>

000004ec <glitch3>:
}


void glitch3(void)
{
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	66 97       	sbiw	r28, 0x16	; 22
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	de bf       	out	0x3e, r29	; 62
    char inp[16];
    char c = 'A';
    unsigned char cnt = 0;
    uart_puts("Password:");
     4fc:	83 e2       	ldi	r24, 0x23	; 35
     4fe:	90 e2       	ldi	r25, 0x20	; 32
     500:	0e 94 8e 01 	call	0x31c	; 0x31c <uart_puts>

void glitch3(void)
{
    char inp[16];
    char c = 'A';
    unsigned char cnt = 0;
     504:	10 e0       	ldi	r17, 0x00	; 0


void glitch3(void)
{
    char inp[16];
    char c = 'A';
     506:	81 e4       	ldi	r24, 0x41	; 65
    unsigned char cnt = 0;
    uart_puts("Password:");
    
    while((c != '\n') & (cnt < 16)){
     508:	10 31       	cpi	r17, 0x10	; 16
     50a:	68 f4       	brcc	.+26     	; 0x526 <glitch3+0x3a>
     50c:	8a 30       	cpi	r24, 0x0A	; 10
     50e:	59 f0       	breq	.+22     	; 0x526 <glitch3+0x3a>
        c = getch();
     510:	0e 94 2a 04 	call	0x854	; 0x854 <input_ch_0>
        inp[cnt] = c;
     514:	e1 e0       	ldi	r30, 0x01	; 1
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ec 0f       	add	r30, r28
     51a:	fd 1f       	adc	r31, r29
     51c:	e1 0f       	add	r30, r17
     51e:	f1 1d       	adc	r31, r1
     520:	80 83       	st	Z, r24
        cnt++;
     522:	1f 5f       	subi	r17, 0xFF	; 255
     524:	f1 cf       	rjmp	.-30     	; 0x508 <glitch3+0x1c>
    }
    
    char passwd[] = "touch";
     526:	86 e0       	ldi	r24, 0x06	; 6
     528:	ee e3       	ldi	r30, 0x3E	; 62
     52a:	f0 e2       	ldi	r31, 0x20	; 32
     52c:	de 01       	movw	r26, r28
     52e:	51 96       	adiw	r26, 0x11	; 17
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	8a 95       	dec	r24
     536:	e1 f7       	brne	.-8      	; 0x530 <glitch3+0x44>
    char passok = 1;
    
    trigger_high();
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 05 06 	sts	0x0605, r24
    trigger_low();
     53e:	80 93 06 06 	sts	0x0606, r24
     542:	de 01       	movw	r26, r28
     544:	51 96       	adiw	r26, 0x11	; 17
     546:	fe 01       	movw	r30, r28
     548:	31 96       	adiw	r30, 0x01	; 1
     54a:	95 e0       	ldi	r25, 0x05	; 5
     54c:	9e 0f       	add	r25, r30
    
    //Simple test - doesn't check for too-long password!
    for(cnt = 0; cnt < 5; cnt++){
        if (inp[cnt] != passwd[cnt]){
     54e:	31 91       	ld	r19, Z+
     550:	2d 91       	ld	r18, X+
     552:	32 13       	cpse	r19, r18
            passok = 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
    
    trigger_high();
    trigger_low();
    
    //Simple test - doesn't check for too-long password!
    for(cnt = 0; cnt < 5; cnt++){
     556:	9e 13       	cpse	r25, r30
     558:	fa cf       	rjmp	.-12     	; 0x54e <glitch3+0x62>
        if (inp[cnt] != passwd[cnt]){
            passok = 0;
        }
    }
    
    if (!passok){
     55a:	81 11       	cpse	r24, r1
     55c:	03 c0       	rjmp	.+6      	; 0x564 <glitch3+0x78>
        uart_puts("Denied\n");
     55e:	8d e2       	ldi	r24, 0x2D	; 45
     560:	90 e2       	ldi	r25, 0x20	; 32
     562:	02 c0       	rjmp	.+4      	; 0x568 <glitch3+0x7c>
    } else {
        uart_puts("Welcome\n");
     564:	85 e3       	ldi	r24, 0x35	; 53
     566:	90 e2       	ldi	r25, 0x20	; 32
    }
}
     568:	66 96       	adiw	r28, 0x16	; 22
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
    }
    
    if (!passok){
        uart_puts("Denied\n");
    } else {
        uart_puts("Welcome\n");
     574:	0c 94 8e 01 	jmp	0x31c	; 0x31c <uart_puts>

00000578 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret

0000057c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	db 01       	movw	r26, r22
     582:	11 96       	adiw	r26, 0x01	; 1
	for(int i = 0; i < len; i++)
     584:	fa 01       	movw	r30, r20
     586:	9f 01       	movw	r18, r30
     588:	24 1b       	sub	r18, r20
     58a:	35 0b       	sbc	r19, r21
     58c:	28 17       	cp	r18, r24
     58e:	39 07       	cpc	r19, r25
     590:	d4 f5       	brge	.+116    	; 0x606 <hex_decode+0x8a>
     592:	ed 01       	movw	r28, r26
     594:	21 97       	sbiw	r28, 0x01	; 1
	{
		char n_hi = ascii_buf[2*i];
     596:	28 81       	ld	r18, Y
		char n_lo = ascii_buf[2*i+1];
     598:	3c 91       	ld	r19, X

		if(n_lo >= '0' && n_lo <= '9')
     59a:	60 ed       	ldi	r22, 0xD0	; 208
     59c:	63 0f       	add	r22, r19
     59e:	6a 30       	cpi	r22, 0x0A	; 10
     5a0:	10 f4       	brcc	.+4      	; 0x5a6 <hex_decode+0x2a>
			data_buf[i] = n_lo - '0';
     5a2:	60 83       	st	Z, r22
     5a4:	0f c0       	rjmp	.+30     	; 0x5c4 <hex_decode+0x48>
		else if(n_lo >= 'A' && n_lo <= 'F')
     5a6:	6f eb       	ldi	r22, 0xBF	; 191
     5a8:	63 0f       	add	r22, r19
     5aa:	66 30       	cpi	r22, 0x06	; 6
     5ac:	10 f4       	brcc	.+4      	; 0x5b2 <hex_decode+0x36>
			data_buf[i] = n_lo - 'A' + 10;
     5ae:	37 53       	subi	r19, 0x37	; 55
     5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <hex_decode+0x46>
		else if(n_lo >= 'a' && n_lo <= 'f')
     5b2:	6f e9       	ldi	r22, 0x9F	; 159
     5b4:	63 0f       	add	r22, r19
     5b6:	66 30       	cpi	r22, 0x06	; 6
     5b8:	18 f0       	brcs	.+6      	; 0x5c0 <hex_decode+0x44>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	25 c0       	rjmp	.+74     	; 0x60a <hex_decode+0x8e>
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
     5c0:	37 55       	subi	r19, 0x57	; 87
     5c2:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
     5c4:	30 ed       	ldi	r19, 0xD0	; 208
     5c6:	32 0f       	add	r19, r18
     5c8:	3a 30       	cpi	r19, 0x0A	; 10
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <hex_decode+0x56>
			data_buf[i] |= (n_hi - '0') << 4;
     5cc:	22 95       	swap	r18
     5ce:	20 7f       	andi	r18, 0xF0	; 240
     5d0:	14 c0       	rjmp	.+40     	; 0x5fa <hex_decode+0x7e>
		else if(n_hi >= 'A' && n_hi <= 'F')
     5d2:	3f eb       	ldi	r19, 0xBF	; 191
     5d4:	32 0f       	add	r19, r18
     5d6:	36 30       	cpi	r19, 0x06	; 6
     5d8:	20 f4       	brcc	.+8      	; 0x5e2 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	27 53       	subi	r18, 0x37	; 55
     5de:	31 09       	sbc	r19, r1
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <hex_decode+0x74>
		else if(n_hi >= 'a' && n_hi <= 'f')
     5e2:	3f e9       	ldi	r19, 0x9F	; 159
     5e4:	32 0f       	add	r19, r18
     5e6:	36 30       	cpi	r19, 0x06	; 6
     5e8:	40 f7       	brcc	.-48     	; 0x5ba <hex_decode+0x3e>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	27 55       	subi	r18, 0x57	; 87
     5ee:	31 09       	sbc	r19, r1
     5f0:	64 e0       	ldi	r22, 0x04	; 4
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	6a 95       	dec	r22
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <hex_decode+0x76>
     5fa:	30 81       	ld	r19, Z
     5fc:	23 2b       	or	r18, r19
     5fe:	20 83       	st	Z, r18
     600:	31 96       	adiw	r30, 0x01	; 1
     602:	12 96       	adiw	r26, 0x02	; 2
     604:	c0 cf       	rjmp	.-128    	; 0x586 <hex_decode+0xa>
		else
			return 1;
	}

	return 0;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands > MAX_SS_CMDS)
     610:	20 91 44 20 	lds	r18, 0x2044
     614:	30 91 45 20 	lds	r19, 0x2045
     618:	2b 30       	cpi	r18, 0x0B	; 11
     61a:	31 05       	cpc	r19, r1
     61c:	cc f4       	brge	.+50     	; 0x650 <simpleserial_addcmd+0x40>
		return 1;

	if(len > MAX_SS_LEN)
     61e:	61 34       	cpi	r22, 0x41	; 65
     620:	71 05       	cpc	r23, r1
     622:	b0 f4       	brcc	.+44     	; 0x650 <simpleserial_addcmd+0x40>
		return 1;

	commands[num_commands].c   = c;
     624:	95 e0       	ldi	r25, 0x05	; 5
     626:	92 9f       	mul	r25, r18
     628:	f0 01       	movw	r30, r0
     62a:	93 9f       	mul	r25, r19
     62c:	f0 0d       	add	r31, r0
     62e:	11 24       	eor	r1, r1
     630:	ea 5b       	subi	r30, 0xBA	; 186
     632:	ff 4d       	sbci	r31, 0xDF	; 223
     634:	80 83       	st	Z, r24
	commands[num_commands].len = len;
     636:	61 83       	std	Z+1, r22	; 0x01
     638:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
     63a:	43 83       	std	Z+3, r20	; 0x03
     63c:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	20 93 44 20 	sts	0x2044, r18
     646:	30 93 45 20 	sts	0x2045, r19

	return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	08 95       	ret
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands > MAX_SS_CMDS)
		return 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
     654:	08 95       	ret

00000656 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
     656:	4c eb       	ldi	r20, 0xBC	; 188
     658:	52 e0       	ldi	r21, 0x02	; 2
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	86 e7       	ldi	r24, 0x76	; 118
     660:	0c 94 08 03 	jmp	0x610	; 0x610 <simpleserial_addcmd>

00000664 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	8b 01       	movw	r16, r22
     676:	ea 01       	movw	r28, r20
	// Write first character
	putch(c);
     678:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
     67c:	7e 01       	movw	r14, r28
     67e:	c7 01       	movw	r24, r14
     680:	8c 1b       	sub	r24, r28
     682:	9d 0b       	sbc	r25, r29
     684:	80 17       	cp	r24, r16
     686:	91 07       	cpc	r25, r17
     688:	b4 f4       	brge	.+44     	; 0x6b6 <simpleserial_put+0x52>
     68a:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
     68c:	d7 01       	movw	r26, r14
     68e:	ed 91       	ld	r30, X+
     690:	7d 01       	movw	r14, r26
     692:	e2 95       	swap	r30
     694:	ef 70       	andi	r30, 0x0F	; 15
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	e0 50       	subi	r30, 0x00	; 0
     69a:	f0 4e       	sbci	r31, 0xE0	; 224
     69c:	80 81       	ld	r24, Z
     69e:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
     6a2:	d6 01       	movw	r26, r12
     6a4:	ec 91       	ld	r30, X
     6a6:	ef 70       	andi	r30, 0x0F	; 15
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	e0 50       	subi	r30, 0x00	; 0
     6ac:	f0 4e       	sbci	r31, 0xE0	; 224
     6ae:	80 81       	ld	r24, Z
     6b0:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
     6b4:	e4 cf       	rjmp	.-56     	; 0x67e <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
     6c8:	0c 94 31 04 	jmp	0x862	; 0x862 <output_ch_0>

000006cc <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	c1 5c       	subi	r28, 0xC1	; 193
     6e6:	d1 09       	sbc	r29, r1
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
     6ec:	0e 94 2a 04 	call	0x854	; 0x854 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     6f0:	40 91 44 20 	lds	r20, 0x2044
     6f4:	50 91 45 20 	lds	r21, 0x2045
     6f8:	26 e4       	ldi	r18, 0x46	; 70
     6fa:	30 e2       	ldi	r19, 0x20	; 32
     6fc:	00 e0       	ldi	r16, 0x00	; 0
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	04 17       	cp	r16, r20
     702:	15 07       	cpc	r17, r21
     704:	54 f4       	brge	.+20     	; 0x71a <simpleserial_get+0x4e>
     706:	2b 5f       	subi	r18, 0xFB	; 251
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	f9 01       	movw	r30, r18
     70c:	35 97       	sbiw	r30, 0x05	; 5
	{
		if(commands[cmd].c == c)
     70e:	90 81       	ld	r25, Z
     710:	98 17       	cp	r25, r24
     712:	39 f0       	breq	.+14     	; 0x722 <simpleserial_get+0x56>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	f3 cf       	rjmp	.-26     	; 0x700 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
     71a:	04 17       	cp	r16, r20
     71c:	15 07       	cpc	r17, r21
     71e:	09 f4       	brne	.+2      	; 0x722 <simpleserial_get+0x56>
     720:	54 c0       	rjmp	.+168    	; 0x7ca <simpleserial_get+0xfe>
     722:	9e 01       	movw	r18, r28
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	79 01       	movw	r14, r18

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     72a:	59 01       	movw	r10, r18
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
     72c:	25 e0       	ldi	r18, 0x05	; 5
     72e:	20 9f       	mul	r18, r16
     730:	c0 01       	movw	r24, r0
     732:	21 9f       	mul	r18, r17
     734:	90 0d       	add	r25, r0
     736:	11 24       	eor	r1, r1
     738:	dc 01       	movw	r26, r24
     73a:	a9 5b       	subi	r26, 0xB9	; 185
     73c:	bf 4d       	sbci	r27, 0xDF	; 223
     73e:	6d 01       	movw	r12, r26
     740:	d6 01       	movw	r26, r12
     742:	8d 91       	ld	r24, X+
     744:	9c 91       	ld	r25, X
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	95 01       	movw	r18, r10
     74c:	2e 19       	sub	r18, r14
     74e:	3f 09       	sbc	r19, r15
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	50 f4       	brcc	.+20     	; 0x76a <simpleserial_get+0x9e>
	{
		c = getch();
     756:	0e 94 2a 04 	call	0x854	; 0x854 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
     75a:	8a 30       	cpi	r24, 0x0A	; 10
     75c:	b1 f1       	breq	.+108    	; 0x7ca <simpleserial_get+0xfe>
     75e:	8d 30       	cpi	r24, 0x0D	; 13
     760:	a1 f1       	breq	.+104    	; 0x7ca <simpleserial_get+0xfe>
			return;

		ascii_buf[i] = c;
     762:	f5 01       	movw	r30, r10
     764:	81 93       	st	Z+, r24
     766:	5f 01       	movw	r10, r30
     768:	eb cf       	rjmp	.-42     	; 0x740 <simpleserial_get+0x74>
	}

	// Assert that last character is \n or \r
	c = getch();
     76a:	0e 94 2a 04 	call	0x854	; 0x854 <input_ch_0>
	if(c != '\n' && c != '\r')
     76e:	8a 30       	cpi	r24, 0x0A	; 10
     770:	11 f0       	breq	.+4      	; 0x776 <simpleserial_get+0xaa>
     772:	8d 30       	cpi	r24, 0x0D	; 13
     774:	51 f5       	brne	.+84     	; 0x7ca <simpleserial_get+0xfe>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
     776:	25 e0       	ldi	r18, 0x05	; 5
     778:	20 9f       	mul	r18, r16
     77a:	c0 01       	movw	r24, r0
     77c:	21 9f       	mul	r18, r17
     77e:	90 0d       	add	r25, r0
     780:	11 24       	eor	r1, r1
     782:	8c 01       	movw	r16, r24
     784:	0a 5b       	subi	r16, 0xBA	; 186
     786:	1f 4d       	sbci	r17, 0xDF	; 223
     788:	ae 01       	movw	r20, r28
     78a:	4f 57       	subi	r20, 0x7F	; 127
     78c:	5f 4f       	sbci	r21, 0xFF	; 255
     78e:	b7 01       	movw	r22, r14
     790:	f8 01       	movw	r30, r16
     792:	81 81       	ldd	r24, Z+1	; 0x01
     794:	92 81       	ldd	r25, Z+2	; 0x02
     796:	0e 94 be 02 	call	0x57c	; 0x57c <hex_decode>
     79a:	89 2b       	or	r24, r25
     79c:	b1 f4       	brne	.+44     	; 0x7ca <simpleserial_get+0xfe>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
     79e:	d8 01       	movw	r26, r16
     7a0:	13 96       	adiw	r26, 0x03	; 3
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	14 97       	sbiw	r26, 0x04	; 4
     7a8:	ce 01       	movw	r24, r28
     7aa:	8f 57       	subi	r24, 0x7F	; 127
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	19 95       	eicall
     7b0:	cf 53       	subi	r28, 0x3F	; 63
     7b2:	df 4f       	sbci	r29, 0xFF	; 255
     7b4:	88 83       	st	Y, r24
     7b6:	c1 5c       	subi	r28, 0xC1	; 193
     7b8:	d0 40       	sbci	r29, 0x00	; 0
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
     7ba:	ae 01       	movw	r20, r28
     7bc:	4f 53       	subi	r20, 0x3F	; 63
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	8a e7       	ldi	r24, 0x7A	; 122
     7c6:	0e 94 32 03 	call	0x664	; 0x664 <simpleserial_put>
#endif
}
     7ca:	cf 53       	subi	r28, 0x3F	; 63
     7cc:	df 4f       	sbci	r29, 0xFF	; 255
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	08 95       	ret

000007e8 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
     7e8:	e0 e4       	ldi	r30, 0x40	; 64
     7ea:	f6 e0       	ldi	r31, 0x06	; 6
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
     7f6:	f8 e0       	ldi	r31, 0x08	; 8
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
     7fc:	8b e0       	ldi	r24, 0x0B	; 11
     7fe:	86 83       	std	Z+6, r24	; 0x06
     800:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
     802:	84 81       	ldd	r24, Z+4	; 0x04
     804:	80 61       	ori	r24, 0x10	; 16
     806:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
     808:	84 81       	ldd	r24, Z+4	; 0x04
     80a:	88 60       	ori	r24, 0x08	; 8
     80c:	84 83       	std	Z+4, r24	; 0x04
     80e:	08 95       	ret

00000810 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	1f 92       	push	r1
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	69 83       	std	Y+1, r22	; 0x01
     81e:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
     824:	49 81       	ldd	r20, Y+1	; 0x01
     826:	5a 81       	ldd	r21, Y+2	; 0x02
     828:	24 17       	cp	r18, r20
     82a:	35 07       	cpc	r19, r21
     82c:	69 f0       	breq	.+26     	; 0x848 <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
     82e:	40 91 a1 08 	lds	r20, 0x08A1
     832:	47 ff       	sbrs	r20, 7
     834:	06 c0       	rjmp	.+12     	; 0x842 <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
     836:	20 91 a0 08 	lds	r18, 0x08A0
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
			return BYTE_REC;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	04 c0       	rjmp	.+8      	; 0x84a <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
     842:	2f 5f       	subi	r18, 0xFF	; 255
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	ee cf       	rjmp	.-36     	; 0x824 <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
     848:	80 e0       	ldi	r24, 0x00	; 0
	}
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
     854:	80 91 a1 08 	lds	r24, 0x08A1
     858:	87 ff       	sbrs	r24, 7
     85a:	fc cf       	rjmp	.-8      	; 0x854 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
     85c:	80 91 a0 08 	lds	r24, 0x08A0
	}
     860:	08 95       	ret

00000862 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
     862:	90 91 a1 08 	lds	r25, 0x08A1
     866:	95 ff       	sbrs	r25, 5
     868:	fc cf       	rjmp	.-8      	; 0x862 <output_ch_0>
	USART_PutChar(&USART, data);
     86a:	80 93 a0 08 	sts	0x08A0, r24
     86e:	08 95       	ret

00000870 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     870:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     872:	60 83       	st	Z, r22
     874:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     876:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     878:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     87a:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     87c:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     87e:	15 86       	std	Z+13, r1	; 0x0d
     880:	08 95       	ret

00000882 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     882:	fc 01       	movw	r30, r24
     884:	62 83       	std	Z+2, r22	; 0x02
     886:	08 95       	ret

00000888 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
     888:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     88a:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     88c:	26 85       	ldd	r18, Z+14	; 0x0e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     88e:	9f 5f       	subi	r25, 0xFF	; 255
     890:	93 70       	andi	r25, 0x03	; 3
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	92 13       	cpse	r25, r18
     896:	01 c0       	rjmp	.+2      	; 0x89a <USART_TXBuffer_FreeSpace+0x12>
     898:	80 e0       	ldi	r24, 0x00	; 0
}
     89a:	08 95       	ret

0000089c <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	1f 92       	push	r1
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	8c 01       	movw	r16, r24
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     8ac:	69 83       	std	Y+1, r22	; 0x01
     8ae:	0e 94 44 04 	call	0x888	; 0x888 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     8b2:	69 81       	ldd	r22, Y+1	; 0x01
     8b4:	88 23       	and	r24, r24
     8b6:	a9 f0       	breq	.+42     	; 0x8e2 <USART_TXBuffer_PutByte+0x46>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     8b8:	d8 01       	movw	r26, r16
     8ba:	1d 96       	adiw	r26, 0x0d	; 13
     8bc:	9c 91       	ld	r25, X
     8be:	1d 97       	sbiw	r26, 0x0d	; 13
	  	TXbufPtr->TX[tempTX_Head]= data;
     8c0:	f8 01       	movw	r30, r16
     8c2:	e9 0f       	add	r30, r25
     8c4:	f1 1d       	adc	r31, r1
     8c6:	67 83       	std	Z+7, r22	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     8c8:	9f 5f       	subi	r25, 0xFF	; 255
     8ca:	93 70       	andi	r25, 0x03	; 3
     8cc:	f8 01       	movw	r30, r16
     8ce:	95 87       	std	Z+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     8d0:	01 90       	ld	r0, Z+
     8d2:	f0 81       	ld	r31, Z
     8d4:	e0 2d       	mov	r30, r0
     8d6:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     8d8:	9c 7f       	andi	r25, 0xFC	; 252
     8da:	12 96       	adiw	r26, 0x02	; 2
     8dc:	2c 91       	ld	r18, X
     8de:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     8e0:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	08 95       	ret

000008ee <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     8ee:	fc 01       	movw	r30, r24
     8f0:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     8f2:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	29 13       	cpse	r18, r25
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <USART_RXBufferData_Available+0xe>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
}
     8fc:	08 95       	ret

000008fe <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     8fe:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     900:	84 85       	ldd	r24, Z+12	; 0x0c
     902:	df 01       	movw	r26, r30
     904:	a8 0f       	add	r26, r24
     906:	b1 1d       	adc	r27, r1
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     90c:	94 85       	ldd	r25, Z+12	; 0x0c
     90e:	9f 5f       	subi	r25, 0xFF	; 255
     910:	93 70       	andi	r25, 0x03	; 3
     912:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
     914:	08 95       	ret

00000916 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     916:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     918:	83 85       	ldd	r24, Z+11	; 0x0b
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     91e:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
     920:	a0 81       	ld	r26, Z
     922:	b1 81       	ldd	r27, Z+1	; 0x01
     924:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
     926:	82 17       	cp	r24, r18
     928:	49 f0       	breq	.+18     	; 0x93c <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     92a:	23 85       	ldd	r18, Z+11	; 0x0b
     92c:	df 01       	movw	r26, r30
     92e:	a2 0f       	add	r26, r18
     930:	b1 1d       	adc	r27, r1
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
     936:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     93c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     93e:	08 95       	ret

00000940 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     946:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
     948:	95 85       	ldd	r25, Z+13	; 0x0d
     94a:	a0 81       	ld	r26, Z
     94c:	b1 81       	ldd	r27, Z+1	; 0x01
     94e:	98 13       	cpse	r25, r24
     950:	07 c0       	rjmp	.+14     	; 0x960 <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     952:	13 96       	adiw	r26, 0x03	; 3
     954:	8c 91       	ld	r24, X
     956:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     958:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	8c 93       	st	X, r24
     95e:	0a c0       	rjmp	.+20     	; 0x974 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     960:	86 85       	ldd	r24, Z+14	; 0x0e
     962:	ef 01       	movw	r28, r30
     964:	c8 0f       	add	r28, r24
     966:	d1 1d       	adc	r29, r1
     968:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
     96a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     96c:	86 85       	ldd	r24, Z+14	; 0x0e
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	83 70       	andi	r24, 0x03	; 3
     972:	86 87       	std	Z+14, r24	; 0x0e
	}
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
     97a:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
     97c:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
     97e:	70 ff       	sbrs	r23, 0
     980:	02 c0       	rjmp	.+4      	; 0x986 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
     982:	81 60       	ori	r24, 0x01	; 1
     984:	01 c0       	rjmp	.+2      	; 0x988 <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
     98a:	60 83       	st	Z, r22
     98c:	08 95       	ret

0000098e <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
     98e:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
     990:	84 81       	ldd	r24, Z+4	; 0x04
     992:	80 ff       	sbrs	r24, 0
     994:	04 c0       	rjmp	.+8      	; 0x99e <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
     996:	80 81       	ld	r24, Z
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	91 60       	ori	r25, 0x01	; 1
     99c:	08 95       	ret
	}else {
		return(usart->DATA);
     99e:	80 81       	ld	r24, Z
     9a0:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     9a2:	08 95       	ret

000009a4 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
     9a4:	10 92 52 00 	sts	0x0052, r1
    OSC.PLLCTRL = 0x00;
     9a8:	10 92 55 00 	sts	0x0055, r1
    OSC.CTRL |= OSC_XOSCEN_bm;
     9ac:	80 91 50 00 	lds	r24, 0x0050
     9b0:	88 60       	ori	r24, 0x08	; 8
     9b2:	80 93 50 00 	sts	0x0050, r24
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     9b6:	80 91 51 00 	lds	r24, 0x0051
     9ba:	83 ff       	sbrs	r24, 3
     9bc:	fc cf       	rjmp	.-8      	; 0x9b6 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
     9be:	88 ed       	ldi	r24, 0xD8	; 216
     9c0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	80 93 40 00 	sts	0x0040, r24
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	80 93 50 00 	sts	0x0050, r24
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
     9ce:	80 e6       	ldi	r24, 0x60	; 96
     9d0:	80 93 01 06 	sts	0x0601, r24
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
     9d4:	80 93 05 06 	sts	0x0605, r24
     9d8:	08 95       	ret

000009da <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
     9da:	08 95       	ret

000009dc <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
     9dc:	68 e7       	ldi	r22, 0x78	; 120
     9de:	70 e2       	ldi	r23, 0x20	; 32
     9e0:	0c 94 18 07 	jmp	0xe30	; 0xe30 <aes128_init>

000009e4 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	aes128_enc(pt, &ctx); /* encrypting the data block */
     9e4:	68 e7       	ldi	r22, 0x78	; 120
     9e6:	70 e2       	ldi	r23, 0x20	; 32
     9e8:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <aes128_enc>

000009ec <aes_shiftcol>:
#include "gf256mul.h"
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void* data, uint8_t shift){
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <aes_shiftcol+0x6>
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
     9fa:	8c 91       	ld	r24, X
     9fc:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
     9fe:	14 96       	adiw	r26, 0x04	; 4
     a00:	8c 91       	ld	r24, X
     a02:	14 97       	sbiw	r26, 0x04	; 4
     a04:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
     a06:	18 96       	adiw	r26, 0x08	; 8
     a08:	8c 91       	ld	r24, X
     a0a:	18 97       	sbiw	r26, 0x08	; 8
     a0c:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
     a0e:	1c 96       	adiw	r26, 0x0c	; 12
     a10:	8c 91       	ld	r24, X
     a12:	1c 97       	sbiw	r26, 0x0c	; 12
     a14:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
     a16:	86 2f       	mov	r24, r22
     a18:	83 70       	andi	r24, 0x03	; 3
     a1a:	e1 e0       	ldi	r30, 0x01	; 1
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	e8 0f       	add	r30, r24
     a24:	f1 1d       	adc	r31, r1
     a26:	80 81       	ld	r24, Z
     a28:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	fb 01       	movw	r30, r22
     a2e:	31 96       	adiw	r30, 0x01	; 1
     a30:	e3 70       	andi	r30, 0x03	; 3
     a32:	ff 27       	eor	r31, r31
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	8c 0f       	add	r24, r28
     a3a:	9d 1f       	adc	r25, r29
     a3c:	e8 0f       	add	r30, r24
     a3e:	f9 1f       	adc	r31, r25
     a40:	80 81       	ld	r24, Z
     a42:	14 96       	adiw	r26, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
     a48:	fb 01       	movw	r30, r22
     a4a:	32 96       	adiw	r30, 0x02	; 2
     a4c:	e3 70       	andi	r30, 0x03	; 3
     a4e:	ff 27       	eor	r31, r31
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	8c 0f       	add	r24, r28
     a56:	9d 1f       	adc	r25, r29
     a58:	e8 0f       	add	r30, r24
     a5a:	f9 1f       	adc	r31, r25
     a5c:	80 81       	ld	r24, Z
     a5e:	18 96       	adiw	r26, 0x08	; 8
     a60:	8c 93       	st	X, r24
     a62:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
     a64:	fb 01       	movw	r30, r22
     a66:	33 96       	adiw	r30, 0x03	; 3
     a68:	e3 70       	andi	r30, 0x03	; 3
     a6a:	ff 27       	eor	r31, r31
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	8c 0f       	add	r24, r28
     a72:	9d 1f       	adc	r25, r29
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	80 81       	ld	r24, Z
     a7a:	1c 96       	adiw	r26, 0x0c	; 12
     a7c:	8c 93       	st	X, r24
}
     a7e:	24 96       	adiw	r28, 0x04	; 4
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
     a8a:	2f 92       	push	r2
     a8c:	3f 92       	push	r3
     a8e:	4f 92       	push	r4
     a90:	5f 92       	push	r5
     a92:	6f 92       	push	r6
     a94:	7f 92       	push	r7
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	6e 97       	sbiw	r28, 0x1e	; 30
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	2c 01       	movw	r4, r24
     aba:	3b 01       	movw	r6, r22
     abc:	54 2f       	mov	r21, r20
     abe:	db 01       	movw	r26, r22
     ac0:	8d 8b       	std	Y+21, r24	; 0x15
     ac2:	9e 8b       	std	Y+22, r25	; 0x16
     ac4:	40 96       	adiw	r24, 0x10	; 16
     ac6:	8f 8b       	std	Y+23, r24	; 0x17
     ac8:	98 8f       	std	Y+24, r25	; 0x18
     aca:	f2 01       	movw	r30, r4
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
     acc:	8d 91       	ld	r24, X+
     ace:	90 81       	ld	r25, Z
     ad0:	89 27       	eor	r24, r25
     ad2:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
	uint8_t i;
	for(i=0; i<16; ++i){
     ad4:	8f 89       	ldd	r24, Y+23	; 0x17
     ad6:	98 8d       	ldd	r25, Y+24	; 0x18
     ad8:	e8 17       	cp	r30, r24
     ada:	f9 07       	cpc	r31, r25
     adc:	b9 f7       	brne	.-18     	; 0xacc <aes_encrypt_core+0x42>
     ade:	93 01       	movw	r18, r6
     ae0:	20 5f       	subi	r18, 0xF0	; 240
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	22 24       	eor	r2, r2
     ae6:	23 94       	inc	r2
     ae8:	de 01       	movw	r26, r28
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	a9 8b       	std	Y+17, r26	; 0x11
     aee:	ba 8b       	std	Y+18, r27	; 0x12
     af0:	a0 5f       	subi	r26, 0xF0	; 240
     af2:	a9 8f       	std	Y+25, r26	; 0x19
     af4:	f2 01       	movw	r30, r4
     af6:	33 96       	adiw	r30, 0x03	; 3
     af8:	ea 8f       	std	Y+26, r30	; 0x1a
     afa:	fb 8f       	std	Y+27, r31	; 0x1b
     afc:	ce 01       	movw	r24, r28
     afe:	41 96       	adiw	r24, 0x11	; 17
     b00:	8b 8b       	std	Y+19, r24	; 0x13
     b02:	9c 8b       	std	Y+20, r25	; 0x14
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
     b04:	52 30       	cpi	r21, 0x02	; 2
     b06:	08 f4       	brcc	.+2      	; 0xb0a <aes_encrypt_core+0x80>
     b08:	a3 c0       	rjmp	.+326    	; 0xc50 <aes_encrypt_core+0x1c6>
     b0a:	8e 01       	movw	r16, r28
     b0c:	0f 5f       	subi	r16, 0xFF	; 255
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	d8 01       	movw	r26, r16
     b12:	c2 01       	movw	r24, r4
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
     b14:	fc 01       	movw	r30, r24
     b16:	41 91       	ld	r20, Z+
     b18:	cf 01       	movw	r24, r30
     b1a:	e4 2f       	mov	r30, r20
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	ea 52       	subi	r30, 0x2A	; 42
     b20:	fe 4f       	sbci	r31, 0xFE	; 254
     b22:	e4 91       	lpm	r30, Z
     b24:	ed 93       	st	X+, r30
static
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
     b26:	f9 8d       	ldd	r31, Y+25	; 0x19
     b28:	fa 13       	cpse	r31, r26
     b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <aes_encrypt_core+0x8a>
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	ce 01       	movw	r24, r28
     b30:	02 96       	adiw	r24, 0x02	; 2
     b32:	2c 8f       	std	Y+28, r18	; 0x1c
     b34:	3d 8f       	std	Y+29, r19	; 0x1d
     b36:	5e 8f       	std	Y+30, r21	; 0x1e
     b38:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
     b3c:	62 e0       	ldi	r22, 0x02	; 2
     b3e:	ce 01       	movw	r24, r28
     b40:	03 96       	adiw	r24, 0x03	; 3
     b42:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	ce 01       	movw	r24, r28
     b4a:	04 96       	adiw	r24, 0x04	; 4
     b4c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
     b50:	ce 01       	movw	r24, r28
     b52:	02 96       	adiw	r24, 0x02	; 2
     b54:	4c 01       	movw	r8, r24
     b56:	de 01       	movw	r26, r28
     b58:	13 96       	adiw	r26, 0x03	; 3
     b5a:	5d 01       	movw	r10, r26
     b5c:	fe 01       	movw	r30, r28
     b5e:	34 96       	adiw	r30, 0x04	; 4
     b60:	6f 01       	movw	r12, r30
     b62:	ea 8c       	ldd	r14, Y+26	; 0x1a
     b64:	fb 8c       	ldd	r15, Y+27	; 0x1b
     b66:	5e 8d       	ldd	r21, Y+30	; 0x1e
     b68:	3d 8d       	ldd	r19, Y+29	; 0x1d
     b6a:	2c 8d       	ldd	r18, Y+28	; 0x1c
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
     b6c:	d4 01       	movw	r26, r8
     b6e:	6c 91       	ld	r22, X
     b70:	f8 01       	movw	r30, r16
     b72:	80 81       	ld	r24, Z
     b74:	68 27       	eor	r22, r24
     b76:	d6 01       	movw	r26, r12
     b78:	3c 90       	ld	r3, X
     b7a:	f5 01       	movw	r30, r10
     b7c:	80 81       	ld	r24, Z
     b7e:	38 26       	eor	r3, r24
     b80:	36 26       	eor	r3, r22
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
     b82:	4b e1       	ldi	r20, 0x1B	; 27
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	2c 8f       	std	Y+28, r18	; 0x1c
     b88:	3d 8f       	std	Y+29, r19	; 0x1d
     b8a:	5e 8f       	std	Y+30, r21	; 0x1e
     b8c:	0e 94 2a 07 	call	0xe54	; 0xe54 <gf256mul>
     b90:	f7 01       	movw	r30, r14
     b92:	33 97       	sbiw	r30, 0x03	; 3
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
     b94:	d8 01       	movw	r26, r16
     b96:	9c 91       	ld	r25, X
     b98:	89 27       	eor	r24, r25
     b9a:	83 25       	eor	r24, r3
     b9c:	80 83       	st	Z, r24
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
     b9e:	f5 01       	movw	r30, r10
     ba0:	60 81       	ld	r22, Z
     ba2:	d4 01       	movw	r26, r8
     ba4:	8c 91       	ld	r24, X
     ba6:	68 27       	eor	r22, r24
     ba8:	4b e1       	ldi	r20, 0x1B	; 27
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 2a 07 	call	0xe54	; 0xe54 <gf256mul>
     bb0:	f7 01       	movw	r30, r14
     bb2:	32 97       	sbiw	r30, 0x02	; 2
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
     bb4:	d4 01       	movw	r26, r8
     bb6:	9c 91       	ld	r25, X
     bb8:	89 27       	eor	r24, r25
     bba:	83 25       	eor	r24, r3
     bbc:	80 83       	st	Z, r24
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
     bbe:	f6 01       	movw	r30, r12
     bc0:	60 81       	ld	r22, Z
     bc2:	d5 01       	movw	r26, r10
     bc4:	8c 91       	ld	r24, X
     bc6:	68 27       	eor	r22, r24
     bc8:	4b e1       	ldi	r20, 0x1B	; 27
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 2a 07 	call	0xe54	; 0xe54 <gf256mul>
     bd0:	f7 01       	movw	r30, r14
     bd2:	31 97       	sbiw	r30, 0x01	; 1
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
     bd4:	d5 01       	movw	r26, r10
     bd6:	9c 91       	ld	r25, X
     bd8:	89 27       	eor	r24, r25
     bda:	83 25       	eor	r24, r3
     bdc:	80 83       	st	Z, r24
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
			  GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
     bde:	f8 01       	movw	r30, r16
     be0:	60 81       	ld	r22, Z
     be2:	d6 01       	movw	r26, r12
     be4:	8c 91       	ld	r24, X
     be6:	68 27       	eor	r22, r24
     be8:	4b e1       	ldi	r20, 0x1B	; 27
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	0e 94 2a 07 	call	0xe54	; 0xe54 <gf256mul>
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
     bf0:	f6 01       	movw	r30, r12
     bf2:	90 81       	ld	r25, Z
     bf4:	89 27       	eor	r24, r25
     bf6:	38 26       	eor	r3, r24
     bf8:	d7 01       	movw	r26, r14
     bfa:	3c 92       	st	X, r3
     bfc:	0c 5f       	subi	r16, 0xFC	; 252
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	b4 e0       	ldi	r27, 0x04	; 4
     c02:	8b 0e       	add	r8, r27
     c04:	91 1c       	adc	r9, r1
     c06:	e4 e0       	ldi	r30, 0x04	; 4
     c08:	ae 0e       	add	r10, r30
     c0a:	b1 1c       	adc	r11, r1
     c0c:	f4 e0       	ldi	r31, 0x04	; 4
     c0e:	cf 0e       	add	r12, r31
     c10:	d1 1c       	adc	r13, r1
     c12:	44 e0       	ldi	r20, 0x04	; 4
     c14:	e4 0e       	add	r14, r20
     c16:	f1 1c       	adc	r15, r1
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
     c18:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c1a:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c1c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     c1e:	8b 89       	ldd	r24, Y+19	; 0x13
     c20:	9c 89       	ldd	r25, Y+20	; 0x14
     c22:	08 17       	cp	r16, r24
     c24:	19 07       	cpc	r17, r25
     c26:	09 f0       	breq	.+2      	; 0xc2a <aes_encrypt_core+0x1a0>
     c28:	a1 cf       	rjmp	.-190    	; 0xb6c <aes_encrypt_core+0xe2>
     c2a:	f2 01       	movw	r30, r4
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	d9 01       	movw	r26, r18
     c32:	a8 0f       	add	r26, r24
     c34:	b9 1f       	adc	r27, r25
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
     c36:	60 81       	ld	r22, Z
     c38:	4c 91       	ld	r20, X
     c3a:	46 27       	eor	r20, r22
     c3c:	41 93       	st	Z+, r20
     c3e:	01 96       	adiw	r24, 0x01	; 1
			^ tmp[4*i+3]
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
     c40:	80 31       	cpi	r24, 0x10	; 16
     c42:	91 05       	cpc	r25, r1
     c44:	a9 f7       	brne	.-22     	; 0xc30 <aes_encrypt_core+0x1a6>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
     c46:	23 94       	inc	r2
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
     c48:	51 50       	subi	r21, 0x01	; 1
     c4a:	20 5f       	subi	r18, 0xF0	; 240
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	5a cf       	rjmp	.-332    	; 0xb04 <aes_encrypt_core+0x7a>
     c50:	d2 01       	movw	r26, r4
static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
     c52:	ec 91       	ld	r30, X
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ea 52       	subi	r30, 0x2A	; 42
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	e4 91       	lpm	r30, Z
     c5c:	ed 93       	st	X+, r30

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
     c5e:	ef 89       	ldd	r30, Y+23	; 0x17
     c60:	f8 8d       	ldd	r31, Y+24	; 0x18
     c62:	ae 17       	cp	r26, r30
     c64:	bf 07       	cpc	r27, r31
     c66:	a9 f7       	brne	.-22     	; 0xc52 <aes_encrypt_core+0x1c8>
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	c2 01       	movw	r24, r4
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	c2 01       	movw	r24, r4
     c76:	02 96       	adiw	r24, 0x02	; 2
     c78:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	c2 01       	movw	r24, r4
     c80:	03 96       	adiw	r24, 0x03	; 3
     c82:	0e 94 f6 04 	call	0x9ec	; 0x9ec <aes_shiftcol>
     c86:	f0 e1       	ldi	r31, 0x10	; 16
     c88:	2f 9e       	mul	r2, r31
     c8a:	10 01       	movw	r2, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	e2 0d       	add	r30, r2
     c96:	f3 1d       	adc	r31, r3
     c98:	e6 0d       	add	r30, r6
     c9a:	f7 1d       	adc	r31, r7
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
     c9c:	ad 89       	ldd	r26, Y+21	; 0x15
     c9e:	be 89       	ldd	r27, Y+22	; 0x16
     ca0:	3c 91       	ld	r19, X
     ca2:	20 81       	ld	r18, Z
     ca4:	23 27       	eor	r18, r19
     ca6:	2d 93       	st	X+, r18
     ca8:	ad 8b       	std	Y+21, r26	; 0x15
     caa:	be 8b       	std	Y+22, r27	; 0x16
     cac:	01 96       	adiw	r24, 0x01	; 1
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
     cae:	80 31       	cpi	r24, 0x10	; 16
     cb0:	91 05       	cpc	r25, r1
     cb2:	79 f7       	brne	.-34     	; 0xc92 <aes_encrypt_core+0x208>
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
}
     cb4:	6e 96       	adiw	r28, 0x1e	; 30
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	3f 90       	pop	r3
     cdc:	2f 90       	pop	r2
     cde:	08 95       	ret

00000ce0 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
     cfa:	8b 01       	movw	r16, r22
     cfc:	e5 e0       	ldi	r30, 0x05	; 5
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	ea 95       	dec	r30
     d04:	e1 f7       	brne	.-8      	; 0xcfe <aes_init+0x1e>
     d06:	c0 2e       	mov	r12, r16
     d08:	78 01       	movw	r14, r16
     d0a:	ff 24       	eor	r15, r15
	hi=4*(nk+6+1);
     d0c:	97 01       	movw	r18, r14
     d0e:	29 5f       	subi	r18, 0xF9	; 249
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	d2 2e       	mov	r13, r18
     d14:	dd 0c       	add	r13, r13
     d16:	dd 0c       	add	r13, r13
	memcpy(ctx, key, keysize_b/8);
     d18:	ab 01       	movw	r20, r22
     d1a:	f3 e0       	ldi	r31, 0x03	; 3
     d1c:	56 95       	lsr	r21
     d1e:	47 95       	ror	r20
     d20:	fa 95       	dec	r31
     d22:	e1 f7       	brne	.-8      	; 0xd1c <aes_init+0x3c>
     d24:	bc 01       	movw	r22, r24
     d26:	ce 01       	movw	r24, r28
     d28:	0e 94 52 07 	call	0xea4	; 0xea4 <memcpy>
	next_nk = nk;
     d2c:	60 2f       	mov	r22, r16
	for(i=nk;i<hi;++i){
     d2e:	80 2f       	mov	r24, r16
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
     d30:	90 e0       	ldi	r25, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
     d32:	8d 15       	cp	r24, r13
     d34:	08 f0       	brcs	.+2      	; 0xd38 <aes_init+0x58>
     d36:	6f c0       	rjmp	.+222    	; 0xe16 <aes_init+0x136>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
     d38:	48 2f       	mov	r20, r24
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	da 01       	movw	r26, r20
     d3e:	a1 50       	subi	r26, 0x01	; 1
     d40:	b0 4c       	sbci	r27, 0xC0	; 192
     d42:	aa 0f       	add	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	aa 0f       	add	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	ac 0f       	add	r26, r28
     d4c:	bd 1f       	adc	r27, r29
     d4e:	0d 91       	ld	r16, X+
     d50:	1d 91       	ld	r17, X+
     d52:	2d 91       	ld	r18, X+
     d54:	3c 91       	ld	r19, X
     d56:	13 97       	sbiw	r26, 0x03	; 3
		if(i!=next_nk){
     d58:	86 17       	cp	r24, r22
     d5a:	09 f1       	breq	.+66     	; 0xd9e <aes_init+0xbe>
			if(nk==8 && i%8==4){
     d5c:	78 e0       	ldi	r23, 0x08	; 8
     d5e:	c7 12       	cpse	r12, r23
     d60:	41 c0       	rjmp	.+130    	; 0xde4 <aes_init+0x104>
     d62:	78 2f       	mov	r23, r24
     d64:	77 70       	andi	r23, 0x07	; 7
     d66:	74 30       	cpi	r23, 0x04	; 4
     d68:	09 f0       	breq	.+2      	; 0xd6c <aes_init+0x8c>
     d6a:	3c c0       	rjmp	.+120    	; 0xde4 <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
     d6c:	e0 2f       	mov	r30, r16
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	ea 52       	subi	r30, 0x2A	; 42
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	e4 91       	lpm	r30, Z
     d76:	0e 2f       	mov	r16, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
     d78:	e1 2f       	mov	r30, r17
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ea 52       	subi	r30, 0x2A	; 42
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	e4 91       	lpm	r30, Z
     d82:	1e 2f       	mov	r17, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
     d84:	e2 2f       	mov	r30, r18
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	ea 52       	subi	r30, 0x2A	; 42
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	e4 91       	lpm	r30, Z
     d8e:	2e 2f       	mov	r18, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
     d90:	e3 2f       	mov	r30, r19
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	ea 52       	subi	r30, 0x2A	; 42
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	e4 91       	lpm	r30, Z
     d9a:	3e 2f       	mov	r19, r30
     d9c:	23 c0       	rjmp	.+70     	; 0xde4 <aes_init+0x104>
     d9e:	68 2f       	mov	r22, r24
     da0:	6c 0d       	add	r22, r12
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
     da2:	70 2f       	mov	r23, r16
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
     da4:	a3 2e       	mov	r10, r19
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
     da6:	e1 2f       	mov	r30, r17
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	ea 52       	subi	r30, 0x2A	; 42
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
     db0:	e2 2f       	mov	r30, r18
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ea 52       	subi	r30, 0x2A	; 42
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	e4 91       	lpm	r30, Z
     dba:	1e 2f       	mov	r17, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
     dbc:	ea 2d       	mov	r30, r10
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	ea 52       	subi	r30, 0x2A	; 42
     dc2:	fe 4f       	sbci	r31, 0xFE	; 254
     dc4:	e4 91       	lpm	r30, Z
     dc6:	2e 2f       	mov	r18, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
     dc8:	e7 2f       	mov	r30, r23
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ea 52       	subi	r30, 0x2A	; 42
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	e4 91       	lpm	r30, Z
     dd2:	3e 2f       	mov	r19, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
     dd4:	e9 2f       	mov	r30, r25
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	e4 53       	subi	r30, 0x34	; 52
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	e4 91       	lpm	r30, Z
     dde:	0e 2f       	mov	r16, r30
     de0:	0b 25       	eor	r16, r11
			rc++;
     de2:	9f 5f       	subi	r25, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
     de4:	fa 01       	movw	r30, r20
     de6:	ee 19       	sub	r30, r14
     de8:	ff 09       	sbc	r31, r15
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ec 0f       	add	r30, r28
     df4:	fd 1f       	adc	r31, r29
		                                   ^ tmp.v32;
     df6:	80 80       	ld	r8, Z
     df8:	91 80       	ldd	r9, Z+1	; 0x01
     dfa:	a2 80       	ldd	r10, Z+2	; 0x02
     dfc:	b3 80       	ldd	r11, Z+3	; 0x03
     dfe:	08 25       	eor	r16, r8
     e00:	19 25       	eor	r17, r9
     e02:	2a 25       	eor	r18, r10
     e04:	3b 25       	eor	r19, r11
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	0d 93       	st	X+, r16
     e0a:	1d 93       	st	X+, r17
     e0c:	2d 93       	st	X+, r18
     e0e:	3c 93       	st	X, r19
     e10:	17 97       	sbiw	r26, 0x07	; 7
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	8e cf       	rjmp	.-228    	; 0xd32 <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	08 95       	ret

00000e30 <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
     e30:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
     e32:	60 e8       	ldi	r22, 0x80	; 128
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0c 94 70 06 	jmp	0xce0	; 0xce0 <aes_init>

00000e3a <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
     e3a:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
     e3c:	60 ec       	ldi	r22, 0xC0	; 192
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	0c 94 70 06 	jmp	0xce0	; 0xce0 <aes_init>

00000e44 <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
     e44:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	0c 94 70 06 	jmp	0xce0	; 0xce0 <aes_init>

00000e4e <aes128_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10);
     e4e:	4a e0       	ldi	r20, 0x0A	; 10
     e50:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <aes_encrypt_core>

00000e54 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
     e54:	78 2f       	mov	r23, r24
	clr r24
     e56:	88 27       	eor	r24, r24
1:	
	lsr A
     e58:	76 95       	lsr	r23
	breq 4f
     e5a:	31 f0       	breq	.+12     	; 0xe68 <gf256mul+0x14>
	brcc 2f
     e5c:	08 f4       	brcc	.+2      	; 0xe60 <gf256mul+0xc>
	eor P, B
     e5e:	86 27       	eor	r24, r22
2:
	lsl B
     e60:	66 0f       	add	r22, r22
	brcc 3f
     e62:	08 f4       	brcc	.+2      	; 0xe66 <gf256mul+0x12>
	eor B, r20	
     e64:	64 27       	eor	r22, r20
3:
	rjmp 1b
     e66:	f8 cf       	rjmp	.-16     	; 0xe58 <gf256mul+0x4>
4:
	brcc 2f
     e68:	08 f4       	brcc	.+2      	; 0xe6c <gf256mul+0x18>
	eor P, B
     e6a:	86 27       	eor	r24, r22
2:
	ret
     e6c:	08 95       	ret

00000e6e <main>:
    }
}

int main(void){

    platform_init();
     e6e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <platform_init>
	init_uart();	
     e72:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <init_uart0>
	trigger_setup();
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 01 06 	sts	0x0601, r24

 	/* Uncomment this to get a HELLO message for debug */
	putch('h');
     e7c:	88 e6       	ldi	r24, 0x68	; 104
     e7e:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
	putch('e');
     e82:	85 e6       	ldi	r24, 0x65	; 101
     e84:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
	putch('l');
     e88:	8c e6       	ldi	r24, 0x6C	; 108
     e8a:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
	putch('l');
     e8e:	8c e6       	ldi	r24, 0x6C	; 108
     e90:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
	putch('o');
     e94:	8f e6       	ldi	r24, 0x6F	; 111
     e96:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
	putch('\n');
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	0e 94 31 04 	call	0x862	; 0x862 <output_ch_0>
    //_delay_ms(20);
		
        
    while(1){
        glitch1();
     ea0:	0e 94 1a 02 	call	0x434	; 0x434 <glitch1>

00000ea4 <memcpy>:
     ea4:	fb 01       	movw	r30, r22
     ea6:	dc 01       	movw	r26, r24
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <memcpy+0xa>
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	41 50       	subi	r20, 0x01	; 1
     eb0:	50 40       	sbci	r21, 0x00	; 0
     eb2:	d8 f7       	brcc	.-10     	; 0xeaa <memcpy+0x6>
     eb4:	08 95       	ret

00000eb6 <sprintf>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	2e 97       	sbiw	r28, 0x0e	; 14
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0e 89       	ldd	r16, Y+22	; 0x16
     eca:	1f 89       	ldd	r17, Y+23	; 0x17
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	8c 83       	std	Y+4, r24	; 0x04
     ed0:	09 83       	std	Y+1, r16	; 0x01
     ed2:	1a 83       	std	Y+2, r17	; 0x02
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f e7       	ldi	r25, 0x7F	; 127
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	ae 01       	movw	r20, r28
     ede:	46 5e       	subi	r20, 0xE6	; 230
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	68 8d       	ldd	r22, Y+24	; 0x18
     ee4:	79 8d       	ldd	r23, Y+25	; 0x19
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	0e 94 85 07 	call	0xf0a	; 0xf0a <vfprintf>
     eee:	2f 81       	ldd	r18, Y+7	; 0x07
     ef0:	38 85       	ldd	r19, Y+8	; 0x08
     ef2:	f8 01       	movw	r30, r16
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	10 82       	st	Z, r1
     efa:	2e 96       	adiw	r28, 0x0e	; 14
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <vfprintf>:
     f0a:	2f 92       	push	r2
     f0c:	3f 92       	push	r3
     f0e:	4f 92       	push	r4
     f10:	5f 92       	push	r5
     f12:	6f 92       	push	r6
     f14:	7f 92       	push	r7
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	2c 97       	sbiw	r28, 0x0c	; 12
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	7c 01       	movw	r14, r24
     f3a:	6b 01       	movw	r12, r22
     f3c:	8a 01       	movw	r16, r20
     f3e:	fc 01       	movw	r30, r24
     f40:	16 82       	std	Z+6, r1	; 0x06
     f42:	17 82       	std	Z+7, r1	; 0x07
     f44:	83 81       	ldd	r24, Z+3	; 0x03
     f46:	81 ff       	sbrs	r24, 1
     f48:	bd c1       	rjmp	.+890    	; 0x12c4 <vfprintf+0x3ba>
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	4c 01       	movw	r8, r24
     f50:	f7 01       	movw	r30, r14
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	f6 01       	movw	r30, r12
     f56:	93 fd       	sbrc	r25, 3
     f58:	85 91       	lpm	r24, Z+
     f5a:	93 ff       	sbrs	r25, 3
     f5c:	81 91       	ld	r24, Z+
     f5e:	6f 01       	movw	r12, r30
     f60:	88 23       	and	r24, r24
     f62:	09 f4       	brne	.+2      	; 0xf66 <vfprintf+0x5c>
     f64:	ab c1       	rjmp	.+854    	; 0x12bc <vfprintf+0x3b2>
     f66:	85 32       	cpi	r24, 0x25	; 37
     f68:	39 f4       	brne	.+14     	; 0xf78 <vfprintf+0x6e>
     f6a:	93 fd       	sbrc	r25, 3
     f6c:	85 91       	lpm	r24, Z+
     f6e:	93 ff       	sbrs	r25, 3
     f70:	81 91       	ld	r24, Z+
     f72:	6f 01       	movw	r12, r30
     f74:	85 32       	cpi	r24, 0x25	; 37
     f76:	29 f4       	brne	.+10     	; 0xf82 <vfprintf+0x78>
     f78:	b7 01       	movw	r22, r14
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
     f80:	e7 cf       	rjmp	.-50     	; 0xf50 <vfprintf+0x46>
     f82:	51 2c       	mov	r5, r1
     f84:	31 2c       	mov	r3, r1
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	20 32       	cpi	r18, 0x20	; 32
     f8a:	a0 f4       	brcc	.+40     	; 0xfb4 <vfprintf+0xaa>
     f8c:	8b 32       	cpi	r24, 0x2B	; 43
     f8e:	69 f0       	breq	.+26     	; 0xfaa <vfprintf+0xa0>
     f90:	30 f4       	brcc	.+12     	; 0xf9e <vfprintf+0x94>
     f92:	80 32       	cpi	r24, 0x20	; 32
     f94:	59 f0       	breq	.+22     	; 0xfac <vfprintf+0xa2>
     f96:	83 32       	cpi	r24, 0x23	; 35
     f98:	69 f4       	brne	.+26     	; 0xfb4 <vfprintf+0xaa>
     f9a:	20 61       	ori	r18, 0x10	; 16
     f9c:	2c c0       	rjmp	.+88     	; 0xff6 <vfprintf+0xec>
     f9e:	8d 32       	cpi	r24, 0x2D	; 45
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <vfprintf+0xa6>
     fa2:	80 33       	cpi	r24, 0x30	; 48
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <vfprintf+0xaa>
     fa6:	21 60       	ori	r18, 0x01	; 1
     fa8:	26 c0       	rjmp	.+76     	; 0xff6 <vfprintf+0xec>
     faa:	22 60       	ori	r18, 0x02	; 2
     fac:	24 60       	ori	r18, 0x04	; 4
     fae:	23 c0       	rjmp	.+70     	; 0xff6 <vfprintf+0xec>
     fb0:	28 60       	ori	r18, 0x08	; 8
     fb2:	21 c0       	rjmp	.+66     	; 0xff6 <vfprintf+0xec>
     fb4:	27 fd       	sbrc	r18, 7
     fb6:	27 c0       	rjmp	.+78     	; 0x1006 <vfprintf+0xfc>
     fb8:	30 ed       	ldi	r19, 0xD0	; 208
     fba:	38 0f       	add	r19, r24
     fbc:	3a 30       	cpi	r19, 0x0A	; 10
     fbe:	78 f4       	brcc	.+30     	; 0xfde <vfprintf+0xd4>
     fc0:	26 ff       	sbrs	r18, 6
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <vfprintf+0xc6>
     fc4:	fa e0       	ldi	r31, 0x0A	; 10
     fc6:	5f 9e       	mul	r5, r31
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	53 2e       	mov	r5, r19
     fce:	13 c0       	rjmp	.+38     	; 0xff6 <vfprintf+0xec>
     fd0:	8a e0       	ldi	r24, 0x0A	; 10
     fd2:	38 9e       	mul	r3, r24
     fd4:	30 0d       	add	r19, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	33 2e       	mov	r3, r19
     fda:	20 62       	ori	r18, 0x20	; 32
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <vfprintf+0xec>
     fde:	8e 32       	cpi	r24, 0x2E	; 46
     fe0:	21 f4       	brne	.+8      	; 0xfea <vfprintf+0xe0>
     fe2:	26 fd       	sbrc	r18, 6
     fe4:	6b c1       	rjmp	.+726    	; 0x12bc <vfprintf+0x3b2>
     fe6:	20 64       	ori	r18, 0x40	; 64
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0xec>
     fea:	8c 36       	cpi	r24, 0x6C	; 108
     fec:	11 f4       	brne	.+4      	; 0xff2 <vfprintf+0xe8>
     fee:	20 68       	ori	r18, 0x80	; 128
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0xec>
     ff2:	88 36       	cpi	r24, 0x68	; 104
     ff4:	41 f4       	brne	.+16     	; 0x1006 <vfprintf+0xfc>
     ff6:	f6 01       	movw	r30, r12
     ff8:	93 fd       	sbrc	r25, 3
     ffa:	85 91       	lpm	r24, Z+
     ffc:	93 ff       	sbrs	r25, 3
     ffe:	81 91       	ld	r24, Z+
    1000:	6f 01       	movw	r12, r30
    1002:	81 11       	cpse	r24, r1
    1004:	c1 cf       	rjmp	.-126    	; 0xf88 <vfprintf+0x7e>
    1006:	98 2f       	mov	r25, r24
    1008:	9f 7d       	andi	r25, 0xDF	; 223
    100a:	95 54       	subi	r25, 0x45	; 69
    100c:	93 30       	cpi	r25, 0x03	; 3
    100e:	28 f4       	brcc	.+10     	; 0x101a <vfprintf+0x110>
    1010:	0c 5f       	subi	r16, 0xFC	; 252
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	ff e3       	ldi	r31, 0x3F	; 63
    1016:	f9 83       	std	Y+1, r31	; 0x01
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x12a>
    101a:	83 36       	cpi	r24, 0x63	; 99
    101c:	31 f0       	breq	.+12     	; 0x102a <vfprintf+0x120>
    101e:	83 37       	cpi	r24, 0x73	; 115
    1020:	71 f0       	breq	.+28     	; 0x103e <vfprintf+0x134>
    1022:	83 35       	cpi	r24, 0x53	; 83
    1024:	09 f0       	breq	.+2      	; 0x1028 <vfprintf+0x11e>
    1026:	5b c0       	rjmp	.+182    	; 0x10de <vfprintf+0x1d4>
    1028:	22 c0       	rjmp	.+68     	; 0x106e <vfprintf+0x164>
    102a:	f8 01       	movw	r30, r16
    102c:	80 81       	ld	r24, Z
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	0e 5f       	subi	r16, 0xFE	; 254
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	44 24       	eor	r4, r4
    1036:	43 94       	inc	r4
    1038:	51 2c       	mov	r5, r1
    103a:	54 01       	movw	r10, r8
    103c:	15 c0       	rjmp	.+42     	; 0x1068 <vfprintf+0x15e>
    103e:	38 01       	movw	r6, r16
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	6f 0e       	add	r6, r31
    1044:	71 1c       	adc	r7, r1
    1046:	f8 01       	movw	r30, r16
    1048:	a0 80       	ld	r10, Z
    104a:	b1 80       	ldd	r11, Z+1	; 0x01
    104c:	26 ff       	sbrs	r18, 6
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <vfprintf+0x14c>
    1050:	65 2d       	mov	r22, r5
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <vfprintf+0x150>
    1056:	6f ef       	ldi	r22, 0xFF	; 255
    1058:	7f ef       	ldi	r23, 0xFF	; 255
    105a:	c5 01       	movw	r24, r10
    105c:	2c 87       	std	Y+12, r18	; 0x0c
    105e:	0e 94 85 09 	call	0x130a	; 0x130a <strnlen>
    1062:	2c 01       	movw	r4, r24
    1064:	83 01       	movw	r16, r6
    1066:	2c 85       	ldd	r18, Y+12	; 0x0c
    1068:	2f 77       	andi	r18, 0x7F	; 127
    106a:	22 2e       	mov	r2, r18
    106c:	17 c0       	rjmp	.+46     	; 0x109c <vfprintf+0x192>
    106e:	38 01       	movw	r6, r16
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	6f 0e       	add	r6, r31
    1074:	71 1c       	adc	r7, r1
    1076:	f8 01       	movw	r30, r16
    1078:	a0 80       	ld	r10, Z
    107a:	b1 80       	ldd	r11, Z+1	; 0x01
    107c:	26 ff       	sbrs	r18, 6
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <vfprintf+0x17c>
    1080:	65 2d       	mov	r22, r5
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <vfprintf+0x180>
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	c5 01       	movw	r24, r10
    108c:	2c 87       	std	Y+12, r18	; 0x0c
    108e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <strnlen_P>
    1092:	2c 01       	movw	r4, r24
    1094:	2c 85       	ldd	r18, Y+12	; 0x0c
    1096:	20 68       	ori	r18, 0x80	; 128
    1098:	22 2e       	mov	r2, r18
    109a:	83 01       	movw	r16, r6
    109c:	23 fc       	sbrc	r2, 3
    109e:	1b c0       	rjmp	.+54     	; 0x10d6 <vfprintf+0x1cc>
    10a0:	83 2d       	mov	r24, r3
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	48 16       	cp	r4, r24
    10a6:	59 06       	cpc	r5, r25
    10a8:	b0 f4       	brcc	.+44     	; 0x10d6 <vfprintf+0x1cc>
    10aa:	b7 01       	movw	r22, r14
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10b4:	3a 94       	dec	r3
    10b6:	f4 cf       	rjmp	.-24     	; 0x10a0 <vfprintf+0x196>
    10b8:	f5 01       	movw	r30, r10
    10ba:	27 fc       	sbrc	r2, 7
    10bc:	85 91       	lpm	r24, Z+
    10be:	27 fe       	sbrs	r2, 7
    10c0:	81 91       	ld	r24, Z+
    10c2:	5f 01       	movw	r10, r30
    10c4:	b7 01       	movw	r22, r14
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    10cc:	31 10       	cpse	r3, r1
    10ce:	3a 94       	dec	r3
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	4f 1a       	sub	r4, r31
    10d4:	51 08       	sbc	r5, r1
    10d6:	41 14       	cp	r4, r1
    10d8:	51 04       	cpc	r5, r1
    10da:	71 f7       	brne	.-36     	; 0x10b8 <vfprintf+0x1ae>
    10dc:	e5 c0       	rjmp	.+458    	; 0x12a8 <vfprintf+0x39e>
    10de:	84 36       	cpi	r24, 0x64	; 100
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <vfprintf+0x1dc>
    10e2:	89 36       	cpi	r24, 0x69	; 105
    10e4:	39 f5       	brne	.+78     	; 0x1134 <vfprintf+0x22a>
    10e6:	f8 01       	movw	r30, r16
    10e8:	27 ff       	sbrs	r18, 7
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <vfprintf+0x1f0>
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0c 5f       	subi	r16, 0xFC	; 252
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <vfprintf+0x200>
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	07 2e       	mov	r0, r23
    1100:	00 0c       	add	r0, r0
    1102:	88 0b       	sbc	r24, r24
    1104:	99 0b       	sbc	r25, r25
    1106:	0e 5f       	subi	r16, 0xFE	; 254
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	2f 76       	andi	r18, 0x6F	; 111
    110c:	72 2e       	mov	r7, r18
    110e:	97 ff       	sbrs	r25, 7
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <vfprintf+0x21a>
    1112:	90 95       	com	r25
    1114:	80 95       	com	r24
    1116:	70 95       	com	r23
    1118:	61 95       	neg	r22
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	20 68       	ori	r18, 0x80	; 128
    1122:	72 2e       	mov	r7, r18
    1124:	2a e0       	ldi	r18, 0x0A	; 10
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a4 01       	movw	r20, r8
    112a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__ultoa_invert>
    112e:	a8 2e       	mov	r10, r24
    1130:	a8 18       	sub	r10, r8
    1132:	44 c0       	rjmp	.+136    	; 0x11bc <vfprintf+0x2b2>
    1134:	85 37       	cpi	r24, 0x75	; 117
    1136:	29 f4       	brne	.+10     	; 0x1142 <vfprintf+0x238>
    1138:	2f 7e       	andi	r18, 0xEF	; 239
    113a:	b2 2e       	mov	r11, r18
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	25 c0       	rjmp	.+74     	; 0x118c <vfprintf+0x282>
    1142:	f2 2f       	mov	r31, r18
    1144:	f9 7f       	andi	r31, 0xF9	; 249
    1146:	bf 2e       	mov	r11, r31
    1148:	8f 36       	cpi	r24, 0x6F	; 111
    114a:	c1 f0       	breq	.+48     	; 0x117c <vfprintf+0x272>
    114c:	18 f4       	brcc	.+6      	; 0x1154 <vfprintf+0x24a>
    114e:	88 35       	cpi	r24, 0x58	; 88
    1150:	79 f0       	breq	.+30     	; 0x1170 <vfprintf+0x266>
    1152:	b4 c0       	rjmp	.+360    	; 0x12bc <vfprintf+0x3b2>
    1154:	80 37       	cpi	r24, 0x70	; 112
    1156:	19 f0       	breq	.+6      	; 0x115e <vfprintf+0x254>
    1158:	88 37       	cpi	r24, 0x78	; 120
    115a:	21 f0       	breq	.+8      	; 0x1164 <vfprintf+0x25a>
    115c:	af c0       	rjmp	.+350    	; 0x12bc <vfprintf+0x3b2>
    115e:	2f 2f       	mov	r18, r31
    1160:	20 61       	ori	r18, 0x10	; 16
    1162:	b2 2e       	mov	r11, r18
    1164:	b4 fe       	sbrs	r11, 4
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <vfprintf+0x278>
    1168:	8b 2d       	mov	r24, r11
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	b8 2e       	mov	r11, r24
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <vfprintf+0x278>
    1170:	24 ff       	sbrs	r18, 4
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <vfprintf+0x27e>
    1174:	9f 2f       	mov	r25, r31
    1176:	96 60       	ori	r25, 0x06	; 6
    1178:	b9 2e       	mov	r11, r25
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x27e>
    117c:	28 e0       	ldi	r18, 0x08	; 8
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x282>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <vfprintf+0x282>
    1188:	20 e1       	ldi	r18, 0x10	; 16
    118a:	32 e0       	ldi	r19, 0x02	; 2
    118c:	f8 01       	movw	r30, r16
    118e:	b7 fe       	sbrs	r11, 7
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <vfprintf+0x296>
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	0c 5f       	subi	r16, 0xFC	; 252
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x2a2>
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 5f       	subi	r16, 0xFE	; 254
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	a4 01       	movw	r20, r8
    11ae:	0e 94 c8 09 	call	0x1390	; 0x1390 <__ultoa_invert>
    11b2:	a8 2e       	mov	r10, r24
    11b4:	a8 18       	sub	r10, r8
    11b6:	fb 2d       	mov	r31, r11
    11b8:	ff 77       	andi	r31, 0x7F	; 127
    11ba:	7f 2e       	mov	r7, r31
    11bc:	76 fe       	sbrs	r7, 6
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <vfprintf+0x2cc>
    11c0:	37 2d       	mov	r19, r7
    11c2:	3e 7f       	andi	r19, 0xFE	; 254
    11c4:	a5 14       	cp	r10, r5
    11c6:	50 f4       	brcc	.+20     	; 0x11dc <vfprintf+0x2d2>
    11c8:	74 fe       	sbrs	r7, 4
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <vfprintf+0x2d6>
    11cc:	72 fc       	sbrc	r7, 2
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <vfprintf+0x2d6>
    11d0:	37 2d       	mov	r19, r7
    11d2:	3e 7e       	andi	r19, 0xEE	; 238
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <vfprintf+0x2d6>
    11d6:	ba 2c       	mov	r11, r10
    11d8:	37 2d       	mov	r19, r7
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <vfprintf+0x2d8>
    11dc:	ba 2c       	mov	r11, r10
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <vfprintf+0x2d8>
    11e0:	b5 2c       	mov	r11, r5
    11e2:	34 ff       	sbrs	r19, 4
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <vfprintf+0x2f6>
    11e6:	fe 01       	movw	r30, r28
    11e8:	ea 0d       	add	r30, r10
    11ea:	f1 1d       	adc	r31, r1
    11ec:	80 81       	ld	r24, Z
    11ee:	80 33       	cpi	r24, 0x30	; 48
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <vfprintf+0x2ec>
    11f2:	39 7e       	andi	r19, 0xE9	; 233
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <vfprintf+0x2fe>
    11f6:	32 ff       	sbrs	r19, 2
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <vfprintf+0x2fc>
    11fa:	b3 94       	inc	r11
    11fc:	b3 94       	inc	r11
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <vfprintf+0x2fe>
    1200:	83 2f       	mov	r24, r19
    1202:	86 78       	andi	r24, 0x86	; 134
    1204:	09 f0       	breq	.+2      	; 0x1208 <vfprintf+0x2fe>
    1206:	b3 94       	inc	r11
    1208:	33 fd       	sbrc	r19, 3
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <vfprintf+0x328>
    120c:	30 ff       	sbrs	r19, 0
    120e:	06 c0       	rjmp	.+12     	; 0x121c <vfprintf+0x312>
    1210:	5a 2c       	mov	r5, r10
    1212:	b3 14       	cp	r11, r3
    1214:	18 f4       	brcc	.+6      	; 0x121c <vfprintf+0x312>
    1216:	53 0c       	add	r5, r3
    1218:	5b 18       	sub	r5, r11
    121a:	b3 2c       	mov	r11, r3
    121c:	b3 14       	cp	r11, r3
    121e:	68 f4       	brcc	.+26     	; 0x123a <vfprintf+0x330>
    1220:	b7 01       	movw	r22, r14
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	3c 87       	std	Y+12, r19	; 0x0c
    1228:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    122c:	b3 94       	inc	r11
    122e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1230:	f5 cf       	rjmp	.-22     	; 0x121c <vfprintf+0x312>
    1232:	b3 14       	cp	r11, r3
    1234:	10 f4       	brcc	.+4      	; 0x123a <vfprintf+0x330>
    1236:	3b 18       	sub	r3, r11
    1238:	01 c0       	rjmp	.+2      	; 0x123c <vfprintf+0x332>
    123a:	31 2c       	mov	r3, r1
    123c:	34 ff       	sbrs	r19, 4
    123e:	12 c0       	rjmp	.+36     	; 0x1264 <vfprintf+0x35a>
    1240:	b7 01       	movw	r22, r14
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	3c 87       	std	Y+12, r19	; 0x0c
    1248:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    124c:	3c 85       	ldd	r19, Y+12	; 0x0c
    124e:	32 ff       	sbrs	r19, 2
    1250:	17 c0       	rjmp	.+46     	; 0x1280 <vfprintf+0x376>
    1252:	31 fd       	sbrc	r19, 1
    1254:	03 c0       	rjmp	.+6      	; 0x125c <vfprintf+0x352>
    1256:	88 e7       	ldi	r24, 0x78	; 120
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <vfprintf+0x356>
    125c:	88 e5       	ldi	r24, 0x58	; 88
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b7 01       	movw	r22, r14
    1262:	0c c0       	rjmp	.+24     	; 0x127c <vfprintf+0x372>
    1264:	83 2f       	mov	r24, r19
    1266:	86 78       	andi	r24, 0x86	; 134
    1268:	59 f0       	breq	.+22     	; 0x1280 <vfprintf+0x376>
    126a:	31 ff       	sbrs	r19, 1
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x368>
    126e:	8b e2       	ldi	r24, 0x2B	; 43
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <vfprintf+0x36a>
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	37 fd       	sbrc	r19, 7
    1276:	8d e2       	ldi	r24, 0x2D	; 45
    1278:	b7 01       	movw	r22, r14
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    1280:	a5 14       	cp	r10, r5
    1282:	38 f4       	brcc	.+14     	; 0x1292 <vfprintf+0x388>
    1284:	b7 01       	movw	r22, r14
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    128e:	5a 94       	dec	r5
    1290:	f7 cf       	rjmp	.-18     	; 0x1280 <vfprintf+0x376>
    1292:	aa 94       	dec	r10
    1294:	f4 01       	movw	r30, r8
    1296:	ea 0d       	add	r30, r10
    1298:	f1 1d       	adc	r31, r1
    129a:	80 81       	ld	r24, Z
    129c:	b7 01       	movw	r22, r14
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12a4:	a1 10       	cpse	r10, r1
    12a6:	f5 cf       	rjmp	.-22     	; 0x1292 <vfprintf+0x388>
    12a8:	33 20       	and	r3, r3
    12aa:	09 f4       	brne	.+2      	; 0x12ae <vfprintf+0x3a4>
    12ac:	51 ce       	rjmp	.-862    	; 0xf50 <vfprintf+0x46>
    12ae:	b7 01       	movw	r22, r14
    12b0:	80 e2       	ldi	r24, 0x20	; 32
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 90 09 	call	0x1320	; 0x1320 <fputc>
    12b8:	3a 94       	dec	r3
    12ba:	f6 cf       	rjmp	.-20     	; 0x12a8 <vfprintf+0x39e>
    12bc:	f7 01       	movw	r30, r14
    12be:	86 81       	ldd	r24, Z+6	; 0x06
    12c0:	97 81       	ldd	r25, Z+7	; 0x07
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x3be>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	9f ef       	ldi	r25, 0xFF	; 255
    12c8:	2c 96       	adiw	r28, 0x0c	; 12
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	af 90       	pop	r10
    12e2:	9f 90       	pop	r9
    12e4:	8f 90       	pop	r8
    12e6:	7f 90       	pop	r7
    12e8:	6f 90       	pop	r6
    12ea:	5f 90       	pop	r5
    12ec:	4f 90       	pop	r4
    12ee:	3f 90       	pop	r3
    12f0:	2f 90       	pop	r2
    12f2:	08 95       	ret

000012f4 <strnlen_P>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	05 90       	lpm	r0, Z+
    12f8:	61 50       	subi	r22, 0x01	; 1
    12fa:	70 40       	sbci	r23, 0x00	; 0
    12fc:	01 10       	cpse	r0, r1
    12fe:	d8 f7       	brcc	.-10     	; 0x12f6 <strnlen_P+0x2>
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	8e 0f       	add	r24, r30
    1306:	9f 1f       	adc	r25, r31
    1308:	08 95       	ret

0000130a <strnlen>:
    130a:	fc 01       	movw	r30, r24
    130c:	61 50       	subi	r22, 0x01	; 1
    130e:	70 40       	sbci	r23, 0x00	; 0
    1310:	01 90       	ld	r0, Z+
    1312:	01 10       	cpse	r0, r1
    1314:	d8 f7       	brcc	.-10     	; 0x130c <strnlen+0x2>
    1316:	80 95       	com	r24
    1318:	90 95       	com	r25
    131a:	8e 0f       	add	r24, r30
    131c:	9f 1f       	adc	r25, r31
    131e:	08 95       	ret

00001320 <fputc>:
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	fb 01       	movw	r30, r22
    132a:	23 81       	ldd	r18, Z+3	; 0x03
    132c:	21 fd       	sbrc	r18, 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <fputc+0x16>
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	28 c0       	rjmp	.+80     	; 0x1386 <fputc+0x66>
    1336:	22 ff       	sbrs	r18, 2
    1338:	16 c0       	rjmp	.+44     	; 0x1366 <fputc+0x46>
    133a:	46 81       	ldd	r20, Z+6	; 0x06
    133c:	57 81       	ldd	r21, Z+7	; 0x07
    133e:	24 81       	ldd	r18, Z+4	; 0x04
    1340:	35 81       	ldd	r19, Z+5	; 0x05
    1342:	42 17       	cp	r20, r18
    1344:	53 07       	cpc	r21, r19
    1346:	44 f4       	brge	.+16     	; 0x1358 <fputc+0x38>
    1348:	a0 81       	ld	r26, Z
    134a:	b1 81       	ldd	r27, Z+1	; 0x01
    134c:	9d 01       	movw	r18, r26
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	20 83       	st	Z, r18
    1354:	31 83       	std	Z+1, r19	; 0x01
    1356:	8c 93       	st	X, r24
    1358:	26 81       	ldd	r18, Z+6	; 0x06
    135a:	37 81       	ldd	r19, Z+7	; 0x07
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	26 83       	std	Z+6, r18	; 0x06
    1362:	37 83       	std	Z+7, r19	; 0x07
    1364:	10 c0       	rjmp	.+32     	; 0x1386 <fputc+0x66>
    1366:	eb 01       	movw	r28, r22
    1368:	09 2f       	mov	r16, r25
    136a:	18 2f       	mov	r17, r24
    136c:	00 84       	ldd	r0, Z+8	; 0x08
    136e:	f1 85       	ldd	r31, Z+9	; 0x09
    1370:	e0 2d       	mov	r30, r0
    1372:	19 95       	eicall
    1374:	89 2b       	or	r24, r25
    1376:	e1 f6       	brne	.-72     	; 0x1330 <fputc+0x10>
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	9f 83       	std	Y+7, r25	; 0x07
    1382:	81 2f       	mov	r24, r17
    1384:	90 2f       	mov	r25, r16
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <__ultoa_invert>:
    1390:	fa 01       	movw	r30, r20
    1392:	aa 27       	eor	r26, r26
    1394:	28 30       	cpi	r18, 0x08	; 8
    1396:	51 f1       	breq	.+84     	; 0x13ec <__ultoa_invert+0x5c>
    1398:	20 31       	cpi	r18, 0x10	; 16
    139a:	81 f1       	breq	.+96     	; 0x13fc <__ultoa_invert+0x6c>
    139c:	e8 94       	clt
    139e:	6f 93       	push	r22
    13a0:	6e 7f       	andi	r22, 0xFE	; 254
    13a2:	6e 5f       	subi	r22, 0xFE	; 254
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	af 4f       	sbci	r26, 0xFF	; 255
    13ac:	b1 e0       	ldi	r27, 0x01	; 1
    13ae:	3e d0       	rcall	.+124    	; 0x142c <__ultoa_invert+0x9c>
    13b0:	b4 e0       	ldi	r27, 0x04	; 4
    13b2:	3c d0       	rcall	.+120    	; 0x142c <__ultoa_invert+0x9c>
    13b4:	67 0f       	add	r22, r23
    13b6:	78 1f       	adc	r23, r24
    13b8:	89 1f       	adc	r24, r25
    13ba:	9a 1f       	adc	r25, r26
    13bc:	a1 1d       	adc	r26, r1
    13be:	68 0f       	add	r22, r24
    13c0:	79 1f       	adc	r23, r25
    13c2:	8a 1f       	adc	r24, r26
    13c4:	91 1d       	adc	r25, r1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	6a 0f       	add	r22, r26
    13ca:	71 1d       	adc	r23, r1
    13cc:	81 1d       	adc	r24, r1
    13ce:	91 1d       	adc	r25, r1
    13d0:	a1 1d       	adc	r26, r1
    13d2:	20 d0       	rcall	.+64     	; 0x1414 <__ultoa_invert+0x84>
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <__ultoa_invert+0x48>
    13d6:	68 94       	set
    13d8:	3f 91       	pop	r19
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	26 9f       	mul	r18, r22
    13de:	11 24       	eor	r1, r1
    13e0:	30 19       	sub	r19, r0
    13e2:	30 5d       	subi	r19, 0xD0	; 208
    13e4:	31 93       	st	Z+, r19
    13e6:	de f6       	brtc	.-74     	; 0x139e <__ultoa_invert+0xe>
    13e8:	cf 01       	movw	r24, r30
    13ea:	08 95       	ret
    13ec:	46 2f       	mov	r20, r22
    13ee:	47 70       	andi	r20, 0x07	; 7
    13f0:	40 5d       	subi	r20, 0xD0	; 208
    13f2:	41 93       	st	Z+, r20
    13f4:	b3 e0       	ldi	r27, 0x03	; 3
    13f6:	0f d0       	rcall	.+30     	; 0x1416 <__ultoa_invert+0x86>
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <__ultoa_invert+0x5c>
    13fa:	f6 cf       	rjmp	.-20     	; 0x13e8 <__ultoa_invert+0x58>
    13fc:	46 2f       	mov	r20, r22
    13fe:	4f 70       	andi	r20, 0x0F	; 15
    1400:	40 5d       	subi	r20, 0xD0	; 208
    1402:	4a 33       	cpi	r20, 0x3A	; 58
    1404:	18 f0       	brcs	.+6      	; 0x140c <__ultoa_invert+0x7c>
    1406:	49 5d       	subi	r20, 0xD9	; 217
    1408:	31 fd       	sbrc	r19, 1
    140a:	40 52       	subi	r20, 0x20	; 32
    140c:	41 93       	st	Z+, r20
    140e:	02 d0       	rcall	.+4      	; 0x1414 <__ultoa_invert+0x84>
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__ultoa_invert+0x6c>
    1412:	ea cf       	rjmp	.-44     	; 0x13e8 <__ultoa_invert+0x58>
    1414:	b4 e0       	ldi	r27, 0x04	; 4
    1416:	a6 95       	lsr	r26
    1418:	97 95       	ror	r25
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	ba 95       	dec	r27
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__ultoa_invert+0x86>
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	61 05       	cpc	r22, r1
    1428:	71 05       	cpc	r23, r1
    142a:	08 95       	ret
    142c:	9b 01       	movw	r18, r22
    142e:	ac 01       	movw	r20, r24
    1430:	0a 2e       	mov	r0, r26
    1432:	06 94       	lsr	r0
    1434:	57 95       	ror	r21
    1436:	47 95       	ror	r20
    1438:	37 95       	ror	r19
    143a:	27 95       	ror	r18
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__ultoa_invert+0xa2>
    1440:	62 0f       	add	r22, r18
    1442:	73 1f       	adc	r23, r19
    1444:	84 1f       	adc	r24, r20
    1446:	95 1f       	adc	r25, r21
    1448:	a0 1d       	adc	r26, r0
    144a:	08 95       	ret

0000144c <_exit>:
    144c:	f8 94       	cli

0000144e <__stop_program>:
    144e:	ff cf       	rjmp	.-2      	; 0x144e <__stop_program>
